(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('url'), require('https'), require('querystring')) :
  typeof define === 'function' && define.amd ? define(['url', 'https', 'querystring'], factory) :
  (global = global || self, global.main = factory(global.url, global.https, global.querystring));
}(this, function (url, https, querystring) { 'use strict';

  url = url && url.hasOwnProperty('default') ? url['default'] : url;
  https = https && https.hasOwnProperty('default') ? https['default'] : https;
  querystring = querystring && querystring.hasOwnProperty('default') ? querystring['default'] : querystring;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var Client =
  /*#__PURE__*/
  function () {
    function Client(request) {
      _classCallCheck(this, Client);

      this._version = 'v1';
      this._request = request;
    }
    /**
     * Get bots
     * @param {Object} params - Filter's object for bots
     * @returns {Promise}
     * @memberOf Client
     */


    _createClass(Client, [{
      key: "getBots",
      value: function getBots() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/bots', params);
      }
    }, {
      key: "getChannels",

      /**
       * Get channels
       * @param {Object} params - Filter's object for channels
       * @returns {Promise}
       * @memberOf Client
       */
      value: function getChannels() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/channels', params);
      }
    }, {
      key: "getChats",

      /**
       * Get chats
       * @param {Object} params - Filter's object for chats
       * @returns {Promise}
       * @memberOf Client
       */
      value: function getChats() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/chats', params);
      }
    }, {
      key: "getCustomers",

      /**
       * Get customers
       * @param {Object} params - Filter's object for customers
       * @returns {Promise}
       * @memberOf Client
       */
      value: function getCustomers() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/customers', params);
      }
    }, {
      key: "getDialogs",

      /**
       * Get dialogs
       * @param {Object} params - Filter's object for dialogs
       * @returns {Promise}
       * @memberOf Client
       */
      value: function getDialogs() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/dialogs', params);
      }
    }, {
      key: "getMembers",

      /**
       * Get members
       * @param {Object} params - Filter's object for members
       * @returns {Promise}
       * @memberOf Client
       */
      value: function getMembers() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/members', params);
      }
    }, {
      key: "assignDialog",

      /**
       * Assign dialog
       * @param {Number} dialog_id - Dialog id
       * @param {Object} dialog - Dialog object
       * @returns {Promise}
       * @throws {Error}
       * @memberOf Client
       */
      value: function assignDialog(dialog_id, dialog) {
        if (!dialog_id) {
          throw new Error('Parameter `dialog_id` is required');
        }

        return this._request.patch(this._version + '/dialogs/' + dialog_id + '/assign', dialog);
      }
    }, {
      key: "closeDialog",

      /**
       * Close dialog
       * @param {Number} dialog_id - Dialog id
       * @returns {Promise}
       * @throws {Error}
       * @memberOf Client
       */
      value: function closeDialog(dialog_id) {
        if (!dialog_id) {
          throw new Error('Parameter `dialog_id` is required');
        }

        return this._request.delete(this._version + '/dialogs/' + dialog_id + '/close');
      }
    }, {
      key: "sendMessage",

      /**
       * Send message
       * @param {Object} message - Message object
       * @returns {Promise}
       * @memberOf Client
       */
      value: function sendMessage(message) {
        return this._request.post(this._version + '/messages', message);
      }
    }, {
      key: "getMessages",

      /**
       * Get messages
       * @param {Object} params - Filter's object for messages
       * @returns {Promise}
       * @memberOf Client
       */
      value: function getMessages() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/messages', params);
      }
    }, {
      key: "deleteMessage",

      /**
       * Delete message
       * @param {Number} message_id - Message id
       * @returns {Promise}
       * @throws {Error}
       * @memberOf Client
       */
      value: function deleteMessage(message_id) {
        if (!message_id) {
          throw new Error('Parameter `message_id` is required');
        }

        return this._request.delete(this._version + '/messages/' + message_id);
      }
    }, {
      key: "editMessage",

      /**
       * Edit message
       * @param {Number} message_id - Message id
       * @param {Object} message - Message object
       * @returns {Promise}
       * @throws {Error}
       * @memberOf Client
       */
      value: function editMessage(message_id, message) {
        if (!message_id) {
          throw new Error('Parameter `message_id` is required');
        }

        return this._request.patch(this._version + '/messages/' + message_id, message);
      }
    }, {
      key: "getCommands",

      /**
       * Get bot commands
       * @param {Object} params - Filter's object for commands
       * @returns {Promise}
       * @memberOf Client
       */
      value: function getCommands() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/my/commands', params);
      }
    }, {
      key: "editCommand",

      /**
       * Edit bot command
       * @param {string} command_name - Command name
       * @param {Object} command - Command object
       * @returns {Promise}
       * @throws {Error}
       * @memberOf Client
       */
      value: function editCommand(command_name, command) {
        if (!command_name) {
          throw new Error('Parameter `command_name` is required');
        }

        return this._request.put(this._version + '/my/commands/' + command_name, command);
      }
    }, {
      key: "deleteCommand",

      /**
       * Delete bot command
       * @param {string} command_name - Command name
       * @returns {Promise}
       * @throws {Error}
       * @memberOf Client
       */
      value: function deleteCommand(command_name) {
        if (!command_name) {
          throw new Error('Parameter `command_name` is required');
        }

        return this._request.delete(this._version + '/my/commands/' + command_name);
      }
    }, {
      key: "info",

      /**
       * Bot information update
       * @param {Object} data - Bot data
       * @returns {Promise}
       * @memberOf Client
       */
      value: function info(data) {
        return this._request.patch(this._version + '/my/info', data);
      }
    }, {
      key: "getUsers",

      /**
       * Get users
       * @param {Object} params - Filter's object for users
       * @returns {Promise}
       * @memberOf Client
       */
      value: function getUsers() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this._request.get(this._version + '/users', params);
      }
    }, {
      key: "getWebsocketData",

      /**
       * Get websocket url
       * @param {array<string>} events - Array of strings with websocket events
       * @returns {Map}
       * @throws {Error}
       * @memberOf Client
       */
      value: function getWebsocketData(events) {
        if (!events) {
          throw new Error('Events is required');
        }

        var map = new Map();
        var url = 'wss://' + this._request.host + '/api/bot/' + this._version + '/ws?events=';
        events.forEach(function (event) {
          url += event + ',';
        });
        url = url.slice(0, -1);
        map.set('url', url);
        map.set('headers', {
          'X-Bot-Token': this._request.token
        });
        return map;
      }
    }]);

    return Client;
  }();

  var Request =
  /*#__PURE__*/
  function () {
    /**
     * @param {Object} options
     * @constructor
     */
    function Request(options) {
      _classCallCheck(this, Request);

      /**
       * @prop System host
       * @type {string}
       * @private
       */
      this._host = url.parse(options.host).host;
      /**
       * @prop Bot token
       * @type {*|string|string}
       * @private
       */

      this._token = options.token;
    }
    /**
     * Get request path
     * @param {string} endpoint
     * @returns {string}
     * @private
     */


    _createClass(Request, [{
      key: "_getPath",
      value: function _getPath(endpoint) {
        return '/api/bot/' + endpoint;
      }
      /**
       * Make request
       * @param {string} endpoint
       * @param {string} method
       * @param {Object} data
       * @returns {Promise}
       * @throws {Error}
       * @private
      */

    }, {
      key: "_request",
      value: function _request(endpoint, method) {
        var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var path = this._getPath(endpoint);

        var response = '';

        if (method === 'GET' && data !== undefined) {
          path += '?' + querystring.stringify(data);
        }

        var options = {
          host: this._host,
          method: method,
          path: path,
          headers: {
            'X-Bot-Token': this._token
          }
        };
        return new Promise(function (resolve, reject) {
          var request = https.request(options, function (res) {
            res.on('data', function (chunk) {
              response += chunk;
            });
            res.on('end', function () {
              try {
                var result = JSON.parse(response);

                if (res.statusCode < 400) {
                  resolve(result);
                } else {
                  reject(new Error(result.errors.join(',')));
                }
              } catch (e) {
                reject(e);
              }
            });
            res.on('error', function (e) {
              reject(e);
            });
          });

          if (['POST', 'PUT', 'PATCH'].includes(method)) {
            request.write(JSON.stringify(data));
          }

          request.end();
          request.on('error', function (e) {
            reject(e);
          });
        });
      }
      /**
       * Method GET
       * @param {string} endpoint
       * @param {Object} params
       * @returns {Promise}
       */

    }, {
      key: "get",
      value: function get(endpoint) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this._request(endpoint, 'GET', params);
      }
      /**
       * Method POST
       * @param {string} endpoint
       * @param {Object} data
       * @returns {Promise}
       * @throws {Error}
       */

    }, {
      key: "post",
      value: function post(endpoint, data) {
        if (!data) {
          throw new Error('Body is not be empty');
        }

        return this._request(endpoint, 'POST', data);
      }
    }, {
      key: "patch",

      /**
       * Method PATCH
       * @param {string} endpoint
       * @param {Object} data
       * @returns {Promise}
       * @throws {Error}
       */
      value: function patch(endpoint, data) {
        if (!data) {
          throw new Error('Body is not be empty');
        }

        return this._request(endpoint, 'PATCH', data);
      }
      /**
       * Method PUT
       * @param {string} endpoint
       * @param {Object} data
       * @returns {Promise}
       * @throws {Error}
       */

    }, {
      key: "put",
      value: function put(endpoint, data) {
        if (!data) {
          throw new Error('Body is not be empty');
        }

        return this._request(endpoint, 'PUT', data);
      }
      /**
       * Method DELETE
       * @param {string} endpoint
       * @returns {Promise}
       */

    }, {
      key: "delete",
      value: function _delete(endpoint) {
        return this._request(endpoint, 'DELETE');
      }
      /**
       * Get api host
       * @returns {string | *}
       */

    }, {
      key: "host",
      get: function get() {
        return this._host;
      }
      /**
       * Get bot token
       * @returns {*|string}
       */

    }, {
      key: "token",
      get: function get() {
        return this._token;
      }
    }]);

    return Request;
  }();

  /**
   * New message websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsMessageNew
   */
  var wsMessageNew = 'message_new';
  /**
   * Updating message websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsMessageUpdated
   */

  var wsMessageUpdated = 'message_updated';
  /**
   * Websocket event delete message
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsMessageDeleted
   */

  var wsMessageDeleted = 'message_deleted';
  /**
   * Dialogue opening websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsDialogOpened
   *
   */

  var wsDialogOpened = 'dialog_opened';
  /**
   * Dialogue closing websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsDialogClosed
   */

  var wsDialogClosed = 'dialog_closed';
  /**
   * Dialogue appointment websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsDialogAssign
   */

  var wsDialogAssign = 'dialog_assign';
  /**
   * Chat creating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsChatCreated
   */

  var wsChatCreated = 'chat_created';
  /**
   * Chat updating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsChatUpdated
   */

  var wsChatUpdated = 'chat_updated';
  /**
   * Unread chat updating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsChatUnreadUpdated
   */

  var wsChatUnreadUpdated = 'chat_unread_updated';
  /**
   * User online status updating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsUserOnlineUpdated
   */

  var wsUserOnlineUpdated = 'user_online_updated';
  /**
   * User joined chat websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsUserJoinedChat
   */

  var wsUserJoinedChat = 'user_joined_chat';
  /**
   * User left chat websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsUserLeftChat
   *
   */

  var wsUserLeftChat = 'user_left_chat';
  /**
   * User updating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsUserUpdated
   */

  var wsUserUpdated = 'user_updated';
  /**
   * Customer updating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsCustomerUpdated
   */

  var wsCustomerUpdated = 'customer_updated';
  /**
   * Bot updating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsBotUpdated
   *
   */

  var wsBotUpdated = 'bot_updated';
  /**
   * Channel updating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsChannelUpdated
   */

  var wsChannelUpdated = 'channel_updated';
  /**
   * Settings updating websocket event
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().wsSettingsUpdated
   */

  var wsSettingsUpdated = 'settings_updated';
  /**
   * Public message scope
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().messageScopePublic
   */

  var messageScopePublic = 'public';
  /**
   * Public message scope
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().messageScopePrivate
   */

  var messageScopePrivate = 'private';
  /**
   * Text message type
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().msgTypeText
   */

  var msgTypeText = 'text';
  /**
   * System message type
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().msgTypeSystem
   */

  var msgTypeSystem = 'system';
  /**
   * Command message type
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().msgTypeCommand
   */

  var msgTypeCommand = 'command';
  /**
   * Order message type
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().msgTypeOrder
   */

  var msgTypeOrder = 'order';
  /**
   * Product message type
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().msgTypeProduct
   */

  var msgTypeProduct = 'product';
  /**
   * File message type
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().msgTypeFile
   */

  var msgTypeFile = 'file';
  /**
   * Image message type
   * @constant
   * @type {string}
   * @example MgBotApiClient.types().msgTypeImage
   */

  var msgTypeImage = 'image';

  var consts = /*#__PURE__*/Object.freeze({
    wsMessageNew: wsMessageNew,
    wsMessageUpdated: wsMessageUpdated,
    wsMessageDeleted: wsMessageDeleted,
    wsDialogOpened: wsDialogOpened,
    wsDialogClosed: wsDialogClosed,
    wsDialogAssign: wsDialogAssign,
    wsChatCreated: wsChatCreated,
    wsChatUpdated: wsChatUpdated,
    wsChatUnreadUpdated: wsChatUnreadUpdated,
    wsUserOnlineUpdated: wsUserOnlineUpdated,
    wsUserJoinedChat: wsUserJoinedChat,
    wsUserLeftChat: wsUserLeftChat,
    wsUserUpdated: wsUserUpdated,
    wsCustomerUpdated: wsCustomerUpdated,
    wsBotUpdated: wsBotUpdated,
    wsChannelUpdated: wsChannelUpdated,
    wsSettingsUpdated: wsSettingsUpdated,
    messageScopePublic: messageScopePublic,
    messageScopePrivate: messageScopePrivate,
    msgTypeText: msgTypeText,
    msgTypeSystem: msgTypeSystem,
    msgTypeCommand: msgTypeCommand,
    msgTypeOrder: msgTypeOrder,
    msgTypeProduct: msgTypeProduct,
    msgTypeFile: msgTypeFile,
    msgTypeImage: msgTypeImage
  });

  var lastApiVersion = 'v1';

  var MgBotApiClient =
  /*#__PURE__*/
  function () {
    /**
     * @param {Object} options
     * @throws {Error}
     */
    function MgBotApiClient(options) {
      _classCallCheck(this, MgBotApiClient);

      if (!options.host) {
        throw new Error('Url is required');
      }

      if (options.host.indexOf('https') !== 0) {
        throw new Error('HTTPS required');
      }

      if (!options.token) {
        throw new Error('Token is required');
      }

      var currentVersion;
      var clients = {
        'v1': Client
      };

      if (options.apiVersion) {
        currentVersion = options.apiVersion;
      } else {
        currentVersion = lastApiVersion;
      }

      this._client = new clients[currentVersion](new Request(options));
    }
    /**
     * Get API client
     * @returns {Client}
     */


    _createClass(MgBotApiClient, [{
      key: "client",
      get: function get() {
        return this._client;
      }
    }], [{
      key: "types",

      /**
       * Get types
       * @returns {{msgTypeOrder?: string, wsUserJoinedChat?: string, msgTypeImage?: string, wsDialogAssign?: string, msgTypeText?: string, messageScopePublic?: string, wsMessageDeleted?: string, msgTypeCommand?: string, msgTypeFile?: string, msgTypeSystem?: string, wsBotUpdated?: string, msgTypeProduct?: string, wsDialogClosed?: string, wsMessageNew?: string, wsMessageUpdated?: string, wsSettingsUpdated?: string, wsUserUpdated?: string, wsCustomerUpdated?: string, wsChatCreated?: string, wsUserLeftChat?: string, wsChannelUpdated?: string, wsDialogOpened?: string, messageScopePrivate?: string, wsUserOnlineUpdated?: string, wsChatUnreadUpdated?: string, wsChatUpdated?: string}}
       */
      value: function types() {
        return consts;
      }
    }]);

    return MgBotApiClient;
  }();

  return MgBotApiClient;

}));
